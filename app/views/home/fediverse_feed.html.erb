<div class="container">
  <div class="row">
    <div class="col-12 mb-4">
      <h1 class="text-center"><%= @title %></h1>
      <p class="text-center">Posts from the Fediverse (ActivityPub network)</p>
    </div>
  </div>

  <!-- Search bar -->
  <div class="row justify-content-center mb-4">
    <div class="col-md-6">
      <%= form_with url: fediverse_feed_path, method: :get, class: "w-100", id: "fediverse-search-form", data: { remote: true } do |f| %>
      <div class="input-group">
          <%= f.text_field :search, value: @search_query, class: "form-control", placeholder: "Search by hashtag (#tag) or keyword or username (@user)" %>
        <div class="input-group-append">
            <%= f.submit "Search", class: "btn btn-primary" %>
          </div>
        </div>
        <div class="d-flex justify-content-between mt-2">
          <div class="small text-muted">
            Example searches: #technology, climate change, @username
          </div>
          <div class="custom-control custom-switch">
            <%= f.check_box :global_search, id: "global-search-toggle", class: "custom-control-input", checked: @global_search %>
            <%= f.label :global_search, "Search All Fediverse", class: "custom-control-label", for: "global-search-toggle" %>
        </div>
      </div>
      <% end %>
    </div>
  </div>

  <!-- Loading spinner (hidden by default) -->
  <div id="loading-spinner" class="text-center my-4 py-4 loading-container" style="display: none;">
    <div class="spinner">
      <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
        <span class="sr-only">Loading...</span>
      </div>
    </div>
    <p class="mt-3 loading-message">Searching the Fediverse...</p>
              </div>
              
  <style>
    .loading-container {
      background-color: rgba(248, 249, 250, 0.7);
      border-radius: 10px;
      padding: 30px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      max-width: 500px;
      margin: 0 auto;
    }
    
    .spinner {
      display: flex;
      justify-content: center;
    }
    
    .loading-message {
      color: #495057;
      font-weight: 500;
    }
    
    @keyframes fadeInOut {
      0%, 100% { opacity: 0.6; }
      50% { opacity: 1; }
    }
    
    .spinner-border {
      border-width: 0.25em;
      animation: spinner-border 1s linear infinite, fadeInOut 2s ease-in-out infinite;
    }
  </style>

  <% if @search_query.present? %>
    <div class="row justify-content-center mb-3 search-results-info">
      <div class="col-md-6">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <strong>Search results for: <%= @search_query %></strong>
            <% if @global_search %><span class="badge badge-info ml-2">Global Search</span><% end %>
            <% if @federated_posts.empty? %>
              <span class="text-muted">(No results)</span>
            <% else %>
              <span class="text-muted">(<%= @federated_posts.total_count %> results)</span>
            <% end %>
          </div>
          <%= link_to "Clear Search", fediverse_feed_path, class: "btn btn-sm btn-outline-secondary" %>
        </div>
      </div>
    </div>
  <% end %>

  <%= render partial: "federated_posts", locals: { federated_posts: @federated_posts } %>
  
  <%= render partial: "federated_pagination", locals: { federated_posts: @federated_posts } %>
  
  <div class="row mt-4">
    <div class="col-12 text-center">
      <a href="<%= fediverse_path %>" class="btn btn-primary">Connect to Fediverse</a>
    </div>
  </div>
</div> 

<script>
  function toggleComments(postId) {
    var commentsSection = document.getElementById('comments-section-' + postId);
    if (commentsSection.style.display === 'none') {
      commentsSection.style.display = 'block';
      loadComments(postId);
    } else {
      commentsSection.style.display = 'none';
    }
  }
  
  function loadComments(postId) {
    // Get comments from the cache
    var commentsListElement = document.getElementById('comments-list-' + postId);
    var comments = JSON.parse(localStorage.getItem('federated_comments_' + postId) || '[]');
    
    if (comments.length === 0) {
      commentsListElement.innerHTML = '<p class="text-center text-muted">No comments yet. Be the first to comment!</p>';
    } else {
      commentsListElement.innerHTML = '';
      comments.forEach(function(comment) {
        var commentElement = document.createElement('div');
        commentElement.className = 'mb-2 p-2 border-bottom';
        commentElement.innerHTML = `<strong>${comment.user}:</strong> ${comment.text}`;
        commentsListElement.appendChild(commentElement);
      });
    }
  }
  
  function submitComment(inputElement, postId) {
    var commentText = inputElement.value.trim();
    if (commentText) {
      // Add the comment to local storage for demo purposes
      var comments = JSON.parse(localStorage.getItem('federated_comments_' + postId) || '[]');
      comments.push({
        user: 'You',
        text: commentText
      });
      localStorage.setItem('federated_comments_' + postId, JSON.stringify(comments));
      
      // Clear the input
      inputElement.value = '';
      
      // Reload comments if section is visible
      var commentsSection = document.getElementById('comments-section-' + postId);
      if (commentsSection.style.display !== 'none') {
        loadComments(postId);
      }
    }
  }
  
  function handleLikeClick(button, postId) {
    var action = button.getAttribute('data-action');
    var likeCountElement = button.querySelector('span');
    var likeCount = parseInt(likeCountElement.textContent);
    
    if (action === 'like') {
      // "Like" the post (demo only - no backend)
      likeCount++;
      button.classList.remove('btn-outline-primary');
      button.classList.add('btn-primary');
      button.setAttribute('data-action', 'unlike');
      
      // Store in localStorage for demo
      var likes = JSON.parse(localStorage.getItem('federated_likes_' + postId) || '[]');
      if (!likes.includes('current_user')) {
        likes.push('current_user');
        localStorage.setItem('federated_likes_' + postId, JSON.stringify(likes));
      }
    } else {
      // "Unlike" the post (demo only - no backend)
      likeCount--;
      button.classList.remove('btn-primary');
      button.classList.add('btn-outline-primary');
      button.setAttribute('data-action', 'like');
      
      // Remove from localStorage for demo
      var likes = JSON.parse(localStorage.getItem('federated_likes_' + postId) || '[]');
      var userIndex = likes.indexOf('current_user');
      if (userIndex !== -1) {
        likes.splice(userIndex, 1);
        localStorage.setItem('federated_likes_' + postId, JSON.stringify(likes));
      }
    }
    
    likeCountElement.textContent = likeCount;
  }

  // Setup debounced search for better performance
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.querySelector('input[name="search"]');
    const globalToggle = document.getElementById('global-search-toggle');
    const searchForm = document.getElementById('fediverse-search-form');
    const loadingSpinner = document.getElementById('loading-spinner');
    let debounceTimer;
    
    // Add tooltip or help text for global search toggle
    const toggleLabel = document.querySelector('label[for="global-search-toggle"]');
    if (toggleLabel) {
      toggleLabel.setAttribute('title', 'Search across the entire Fediverse, not just accounts you follow');
      toggleLabel.style.cursor = 'help';
    }
    
    // Show loading spinner when form is submitted
    if (searchForm) {
      searchForm.addEventListener('ajax:before', function() {
        // Show loading spinner
        if (loadingSpinner) {
          // Fade content behind the spinner
          document.querySelectorAll('.search-results-info, .row:has(.col-lg-12), .row:has(.justify-content-center)').forEach(el => {
            if (el) el.style.opacity = '0.4';
            if (el) el.style.transition = 'opacity 0.3s';
          });
          
          // Show the spinner with animation
          loadingSpinner.style.display = 'block';
          loadingSpinner.style.opacity = '0';
          setTimeout(() => {
            loadingSpinner.style.opacity = '1';
          }, 10);
          
          // Customize the message based on search type
          const messageEl = loadingSpinner.querySelector('.loading-message');
          if (messageEl) {
            if (globalToggle && globalToggle.checked) {
              const query = searchInput.value.trim();
              if (query.startsWith('#')) {
                messageEl.innerHTML = `Searching for <strong>${query}</strong> across the global Fediverse...<br><small>This may take a moment as we check multiple servers</small>`;
              } else {
                messageEl.innerHTML = `Searching for "<strong>${query}</strong>" across the global Fediverse...<br><small>This may take a moment as we check multiple servers</small>`;
              }
            } else {
              const query = searchInput.value.trim();
              if (query) {
                messageEl.innerHTML = `Searching for "<strong>${query}</strong>" in your followed accounts...`;
              } else {
                messageEl.textContent = `Loading your Fediverse timeline...`;
              }
            }
          }
        }
      });
      
      searchForm.addEventListener('ajax:complete', function() {
        // Hide loading spinner
        if (loadingSpinner) {
          loadingSpinner.style.display = 'none';
          document.querySelectorAll('.search-results-info, .row:has(.col-lg-12), .row:has(.justify-content-center)').forEach(el => {
            if (el) el.style.opacity = '1';
          });
        }
      });
    }
    
    // Listen for changes on the global search toggle
    if (globalToggle) {
      globalToggle.addEventListener('change', function() {
        if (searchInput.value.length > 0) {
          // If there's a search query, submit the form immediately when toggling
          document.getElementById('fediverse-search-form').dispatchEvent(
            new Event('submit', { bubbles: true, cancelable: true })
          );
        }
      });
    }
    
    searchInput.addEventListener('input', function() {
      clearTimeout(debounceTimer);
      
      // Only trigger search if the input has at least 2 characters or is empty
      if (this.value.length > 2 || this.value.length === 0) {
        debounceTimer = setTimeout(() => {
          document.getElementById('fediverse-search-form').dispatchEvent(
            new Event('submit', { bubbles: true, cancelable: true })
          );
        }, 500); // Wait 500ms after typing stops before searching
      }
    });
    
    // Add click handlers to hashtags for easy filtering
    document.body.addEventListener('click', function(e) {
      if (e.target.classList.contains('badge-secondary') && e.target.textContent.startsWith('#')) {
        e.preventDefault();
        searchInput.value = e.target.textContent;
        document.getElementById('fediverse-search-form').dispatchEvent(
          new Event('submit', { bubbles: true, cancelable: true })
        );
      }
    });
  });
</script> 